=begin
#ocrapi

#The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module CloudmersiveOcrApiClient
  # Definition of a form field for OCR data extraction from images
  class FormFieldDefinition
    # The identifier of the field; use this to identify which field is being referenced.  Set to SkipField if you do not wish to return the value of this field in the result.
    attr_accessor :field_id

    # Optional - the left-hand anchor of the field
    attr_accessor :left_anchor

    # Optional - the top anchor of the field
    attr_accessor :top_anchor

    # Optional - the bottom anchor of the field
    attr_accessor :bottom_anchor

    # Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match) and Horizontal (anchor must be laid out horizontally).  Default is Partial.
    attr_accessor :anchor_mode

    # The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)
    attr_accessor :data_type

    # Optional - the target number of digits in the field; useful for fixed-length fields
    attr_accessor :target_digit_count

    # Optional - the target number of digits in the field; useful for fixed-length fields
    attr_accessor :minimum_character_count

    # Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits
    attr_accessor :allow_numeric_digits

    # Vertical alignment of target value area relative to the field anchor; Possible values are VCenter, Top, Bottom
    attr_accessor :vertical_alignment_type

    # Horizontal alignment of target value area relative to the field anchor; Possible values are Left, Right
    attr_accessor :horizontal_alignment_type

    # Optional - scale factor for target field width - relative to width of field title; a value of 1.0 indicates the target value area has the same width as the field value as occurring in the image; a value of 2.0 would indicate that the target value area has 2 times the width of the field value as occurring in the image.
    attr_accessor :target_field_width_relative

    # Optional - scale factor for target field height - relative to height of field title
    attr_accessor :target_field_height_relative

    # Optional - horizontal adjestment in relative width of the field
    attr_accessor :target_field_horizontal_adjustment

    # Optional - vertical adjestment in relative height of the field
    attr_accessor :target_field_vertical_adjustment

    # Optional - Ignore any result items that contain a partial or complete match with these text strings
    attr_accessor :ignore


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'field_id' => :'FieldID',
        :'left_anchor' => :'LeftAnchor',
        :'top_anchor' => :'TopAnchor',
        :'bottom_anchor' => :'BottomAnchor',
        :'anchor_mode' => :'AnchorMode',
        :'data_type' => :'DataType',
        :'target_digit_count' => :'TargetDigitCount',
        :'minimum_character_count' => :'MinimumCharacterCount',
        :'allow_numeric_digits' => :'AllowNumericDigits',
        :'vertical_alignment_type' => :'VerticalAlignmentType',
        :'horizontal_alignment_type' => :'HorizontalAlignmentType',
        :'target_field_width_relative' => :'TargetFieldWidth_Relative',
        :'target_field_height_relative' => :'TargetFieldHeight_Relative',
        :'target_field_horizontal_adjustment' => :'TargetFieldHorizontalAdjustment',
        :'target_field_vertical_adjustment' => :'TargetFieldVerticalAdjustment',
        :'ignore' => :'Ignore'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'field_id' => :'String',
        :'left_anchor' => :'String',
        :'top_anchor' => :'String',
        :'bottom_anchor' => :'String',
        :'anchor_mode' => :'String',
        :'data_type' => :'String',
        :'target_digit_count' => :'Integer',
        :'minimum_character_count' => :'Integer',
        :'allow_numeric_digits' => :'BOOLEAN',
        :'vertical_alignment_type' => :'String',
        :'horizontal_alignment_type' => :'String',
        :'target_field_width_relative' => :'Float',
        :'target_field_height_relative' => :'Float',
        :'target_field_horizontal_adjustment' => :'Float',
        :'target_field_vertical_adjustment' => :'Float',
        :'ignore' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'FieldID')
        self.field_id = attributes[:'FieldID']
      end

      if attributes.has_key?(:'LeftAnchor')
        self.left_anchor = attributes[:'LeftAnchor']
      end

      if attributes.has_key?(:'TopAnchor')
        self.top_anchor = attributes[:'TopAnchor']
      end

      if attributes.has_key?(:'BottomAnchor')
        self.bottom_anchor = attributes[:'BottomAnchor']
      end

      if attributes.has_key?(:'AnchorMode')
        self.anchor_mode = attributes[:'AnchorMode']
      end

      if attributes.has_key?(:'DataType')
        self.data_type = attributes[:'DataType']
      end

      if attributes.has_key?(:'TargetDigitCount')
        self.target_digit_count = attributes[:'TargetDigitCount']
      end

      if attributes.has_key?(:'MinimumCharacterCount')
        self.minimum_character_count = attributes[:'MinimumCharacterCount']
      end

      if attributes.has_key?(:'AllowNumericDigits')
        self.allow_numeric_digits = attributes[:'AllowNumericDigits']
      end

      if attributes.has_key?(:'VerticalAlignmentType')
        self.vertical_alignment_type = attributes[:'VerticalAlignmentType']
      end

      if attributes.has_key?(:'HorizontalAlignmentType')
        self.horizontal_alignment_type = attributes[:'HorizontalAlignmentType']
      end

      if attributes.has_key?(:'TargetFieldWidth_Relative')
        self.target_field_width_relative = attributes[:'TargetFieldWidth_Relative']
      end

      if attributes.has_key?(:'TargetFieldHeight_Relative')
        self.target_field_height_relative = attributes[:'TargetFieldHeight_Relative']
      end

      if attributes.has_key?(:'TargetFieldHorizontalAdjustment')
        self.target_field_horizontal_adjustment = attributes[:'TargetFieldHorizontalAdjustment']
      end

      if attributes.has_key?(:'TargetFieldVerticalAdjustment')
        self.target_field_vertical_adjustment = attributes[:'TargetFieldVerticalAdjustment']
      end

      if attributes.has_key?(:'Ignore')
        if (value = attributes[:'Ignore']).is_a?(Array)
          self.ignore = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          field_id == o.field_id &&
          left_anchor == o.left_anchor &&
          top_anchor == o.top_anchor &&
          bottom_anchor == o.bottom_anchor &&
          anchor_mode == o.anchor_mode &&
          data_type == o.data_type &&
          target_digit_count == o.target_digit_count &&
          minimum_character_count == o.minimum_character_count &&
          allow_numeric_digits == o.allow_numeric_digits &&
          vertical_alignment_type == o.vertical_alignment_type &&
          horizontal_alignment_type == o.horizontal_alignment_type &&
          target_field_width_relative == o.target_field_width_relative &&
          target_field_height_relative == o.target_field_height_relative &&
          target_field_horizontal_adjustment == o.target_field_horizontal_adjustment &&
          target_field_vertical_adjustment == o.target_field_vertical_adjustment &&
          ignore == o.ignore
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [field_id, left_anchor, top_anchor, bottom_anchor, anchor_mode, data_type, target_digit_count, minimum_character_count, allow_numeric_digits, vertical_alignment_type, horizontal_alignment_type, target_field_width_relative, target_field_height_relative, target_field_horizontal_adjustment, target_field_vertical_adjustment, ignore].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveOcrApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
